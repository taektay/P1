#!/usr/bin/env python3

import rospy
from std_msgs.msg import Header
from ee106s24.msg import EE106lab_custom_new

import random

def talker():
	rospy.init_node('talker')
	pub = rospy.Publisher('EE106lab_topic', EE106lab_custom_new, queue_size=10)

	while not rospy.is_shutdown():
    	custom_msg = EE106lab_custom_new()
    	custom_msg.header = Header()
    	custom_msg.header.stamp = rospy.Time.now()
    	custom_msg.int_data = random.randint(-100, 100)
    	custom_msg.float_data = random.random() * 100
    	custom_msg.string_data = "Random value message"

    	rospy.loginfo(f"Publishing: int_data = {custom_msg.int_data}, float_data = {custom_msg.float_data}")
    	pub.publish(custom_msg)
    	
def process_lidar_data(ranges, status_publisher):
    # check the distance values
    critical = any(distance < 0.2 for distance in ranges if distance != float('Inf'))
    major = any(distance < 0.5 for distance in ranges if distance != float('Inf'))

    if critical:
        status_message = "critical"
    elif major:
        status_message = "major"
    else:
        status_message = "minor"

    # status message
    status_msg = String()
    status_msg.data = f'LIDAR alert: {status_message}'
    status_publisher.publish(status_msg)

def lidar_callback(data, status_publisher):
    rospy.loginfo(rospy.get_caller_id() + " I heard %s", data.header.stamp)

    # process and publish range data
    process_lidar_data(data.ranges, status_publisher)
    
    # publish receipt of data
    status_message = String()
    status_message.data = 'LIDAR data received at: {}'.format(data.header.stamp)
    status_publisher.publish(status_message)

def lidar_listener():
    rospy.init_node('lidar_listener', anonymous=True)

    # publisher for robot status
    status_publisher = rospy.Publisher('jackal_robot_status', String, queue_size=10)

    # subscriber to the lidar data topic
    rospy.Subscriber("scan", LaserScan, lidar_callback, callback_args=status_publisher)

    # keep node running
    rospy.spin()

while not rospy.is_shutdown():
	custom_msg = EE106lab_custom_new()
	custom_msg.header = Header()
	custom_msg.header.stamp = rospy.Time.now()
	custom_msg.int_data = random.randint(-100, 100)
	custom_msg.float_data = random.random() * 100
	custom_msg.string_data = "Random value message"

	rospy.loginfo(f"Publishing: int_data = {custom_msg.int_data}, float_data = {custom_msg.float_data}")
	pub.publish(custom_msg)
    	

	lidar_listener()
