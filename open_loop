#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
from math import pi

class Turtlebot():
    def __init__(self):
        rospy.init_node("turtlebot_move")
        rospy.loginfo("Press Ctrl + C to terminate")
        self.vel_pub = rospy.Publisher("cmd_vel", Twist, queue_size=10)
        self.rate = rospy.Rate(10)
        self.run()

    def move_forward(self, speed, distance):
        vel = Twist()
        vel.linear.x = abs(speed)
        vel.angular.z = 0

        t0 = rospy.Time.now().to_sec()
        current_distance = 0

        while current_distance < distance:
            self.vel_pub.publish(vel)
            t1 = rospy.Time.now().to_sec()
            current_distance = speed * (t1 - t0)
            self.rate.sleep()

        vel.linear.x = 0
        self.vel_pub.publish(vel)

    def rotate(self, angular_speed, relative_angle):
        vel = Twist()
        vel.linear.x = 0
        vel.angular.z = abs(angular_speed)

        t0 = rospy.Time.now().to_sec()
        current_angle = 0

        while current_angle < relative_angle:
            self.vel_pub.publish(vel)
            t1 = rospy.Time.now().to_sec()
            current_angle = angular_speed * (t1 - t0)
            self.rate.sleep()

        vel.angular.z = 0
        self.vel_pub.publish(vel)

    def run(self):
        # Square movement parameters
        speed = 0.2
        distance = 4
        angular_speed = 0.5
        relative_angle = pi / 2  # 90 degrees in radians

        for _ in range(4):
            self.move_forward(speed, distance)
            self.rotate(angular_speed, relative_angle)

if __name__ == '__main__':
    try:
        tb = Turtlebot()
    except rospy.ROSInterruptException:
        rospy.loginfo("Action terminated.")
